{
	"info": {
		"_postman_id": "e2e7fecc-8796-4527-8f17-9678b61563e9",
		"name": "100x Microblogging Post Assignment",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests for the 100x Microblogging API.\n\n## ðŸ”– **How to use this API**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n``` json\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have provided a variable called `base_url` with the sample request \\`[https://one00x-data-analysis.onrender.com` . ](https://one00x-data-analysis.onrender.com) [Replace it with your API endpoint to customize this collection. When working locally, this could <code>http://localhost:3000</code>](http://localhost:3000) or whatever port your local server is running on.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n- Inspect all requests and responses carefully; both headers and body",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29730034"
	},
	"item": [
		{
			"name": "Create Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"post\": {\n        \"content\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam lobortis arcu a nibh placerat porttitor. Morbi faucibus ipsum sed tellus vehicula, vel tempor erat vehicula. Nunc a fringilla elit.\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://one00x-data-analysis.onrender.com"
		},
		{
			"key": "user_id",
			"value": "42",
			"type": "string"
		}
	]
}